stages:
  - lint
  - test

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POSTGRES_USER: '{{ cookiecutter.project_slug }}'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_{{ cookiecutter.project_slug }}'
  POSTGRES_HOST_AUTH_METHOD: trust
  {% if cookiecutter.use_celery == 'y' -%}
  CELERY_BROKER_URL: 'redis://redis:6379/0'
  {%- endif %}

cache:
  paths:
    - .cache/pip
    - venv/

flake8:
  stage: lint
  image: python:3.8-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8

pytest:
  stage: test
  image: python:3.8
  tags:
    - python
  services:
    - postgres:{{ cookiecutter.postgresql_version }}
    {% if cookiecutter.use_celery == 'y' -%}
    - redis:latest
    {%- endif %}
  variables:
    DATABASE_URL: pgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
    USE_DOCKER: 'no'
    Host: redis

  # Caching involves creating a virtual environment
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements/local.txt
    {% if cookiecutter.use_celery == 'y' -%}
    - celery multi start worker beat -A config.celery_app --pool=solo
    {%- endif %}

  script:
    - pytest

